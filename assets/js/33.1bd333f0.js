(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{199:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"垃圾回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收","aria-hidden":"true"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),e("p",[t._v("https://segmentfault.com/a/1190000004665100")]),t._v(" "),e("blockquote",[e("p",[t._v("2019.05.30")])]),t._v(" "),e("p",[t._v("作为编写程序的人，是可以做出“这个对象已经不再需要了”这样的判断，但计算机是做不到的。因此，如果程序（通过某个变量等等）可能会直接或间接地引用一个对象，那么这个对象就被视为“存活”；与之相反，已经引用不到的对象被视为“死亡”。将这些“死亡”对象找出来，然后作为垃圾进行回收，这就是 GC 的本质。")]),t._v(" "),e("p",[t._v("三大基础 GC 算法")]),t._v(" "),e("h3",{attrs:{id:"引用计数法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用计数法","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用计数法")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://image-static.segmentfault.com/249/386/2493863077-56f154a26799a_articlex",alt:""}}),t._v("\n它的基本原理是，在每个对象中保存该对象的引用计数，当引用发生增减时对计数进行更新。引用计数的增减，一般发生在变量赋值、对象内容更新、函数结束（局部变量不再被引用）等时间点。当一个对象的引用计数变为 0 时，则说明它将来不会再被引用，因此可以释放相应的内存空间。")]),t._v(" "),e("h3",{attrs:{id:"标记清除法-标记压缩法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标记清除法-标记压缩法","aria-hidden":"true"}},[t._v("#")]),t._v(" 标记清除法/标记压缩法")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://segmentfault.com/img/bVtJJC",alt:""}})]),t._v(" "),e("p",[t._v("这个算法假定设置一个叫做根（root）的对象（在 Javascript 里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象")]),t._v(" "),e("p",[t._v("从 2012 年起，所有现代浏览器都使用了标记-清除垃圾回收算法。所有对 JavaScript 垃圾回收算法的改进都是基于标记-清除算法的改进，并没有改进标记-清除算法本身和它对“对象是否不再需要”的简化定义。")]),t._v(" "),e("p",[t._v("标记清除算法有一个缺点，就是在分配了大量对象，并且其中只有一小部分存活的情况下，所消耗的时间会大大超过必要的值，这是因为在清除阶段还需要对大量死亡对象进行扫描。")])])}],!1,null,null,null);a.default=r.exports}}]);